package main

import (
	_ "embed"
	"errors"
	cliFlag "flag"

	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	gokzg4844 "github.com/crate-crypto/go-kzg-4844"
	"github.com/gorilla/mux"
)

const SerializedScalarSize = 32
const ScalarsPerBlob = 4096
const ProofSize = 48

//go:embed trusted_setup.json
var kzgSetupStr string
var kzgContext *gokzg4844.Context

var portRef = cliFlag.Int("port", 13338, "listen")

func main() {
	cliFlag.Parse()
	if err := New4844Context(); err != nil {
		log.Fatal(err)
	}
	fmt.Println("Loaded trusted setup")

	fmt.Printf("Starting server at port %d\n", *portRef)

	router := mux.NewRouter().StrictSlash(true)

	router.HandleFunc("/commit", handleCommit).Methods("POST")

	addr := fmt.Sprintf(":%d", *portRef)
	if err := http.ListenAndServe(addr, router); err != nil {
		log.Fatal(err)
	}
}

func New4844Context() error {
	parsedSetup := gokzg4844.JSONTrustedSetup{}
	if err := json.Unmarshal([]byte(kzgSetupStr), &parsedSetup); err != nil {
		return err
	}
	var err error
	if kzgContext, err = gokzg4844.NewContext4096(&parsedSetup); err != nil {
		return err
	}
	return nil
}

type CommitRequest struct {
	Input string `json:"input"`
}

func decodeBlob(input string) (*gokzg4844.Blob, error) {
	rawBlob, err := base64.StdEncoding.DecodeString(input)
	if err != nil {
		return nil, errors.New("failed to decode base64")
	}
	if len(rawBlob) != ScalarsPerBlob*SerializedScalarSize {
		return nil, errors.New("input length mismatch")
	}
	var blob gokzg4844.Blob
	copy(blob[:], rawBlob)
	return &blob, nil
}

func handleCommit(rw http.ResponseWriter, req *http.Request) {
	var request CommitRequest
	if err := json.NewDecoder(req.Body).Decode(&request); err != nil {
		http.Error(rw, "failed to decode JSON request", http.StatusBadRequest)
		return
	}
	blob, err := decodeBlob(request.Input)
	if err != nil {
		http.Error(rw, err.Error(), http.StatusBadRequest)
		return
	}
	commitment, err := kzgContext.BlobToKZGCommitment(*blob, 4)
	if err != nil {
		http.Error(rw, "commitment calculation failure ", http.StatusBadRequest)
		return
	}
	rw.WriteHeader(http.StatusOK)
	json.NewEncoder(rw).Encode(
		map[string][]byte{"commitment": commitment[:]},
	)
}
